// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KeyMessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_KeyMessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_KeyMessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "LoginMessages.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_KeyMessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_KeyMessages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KeyMessages_2eproto;
class EncryptedMessage;
struct EncryptedMessageDefaultTypeInternal;
extern EncryptedMessageDefaultTypeInternal _EncryptedMessage_default_instance_;
class KeyExchange;
struct KeyExchangeDefaultTypeInternal;
extern KeyExchangeDefaultTypeInternal _KeyExchange_default_instance_;
class Wrapper;
struct WrapperDefaultTypeInternal;
extern WrapperDefaultTypeInternal _Wrapper_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::EncryptedMessage* Arena::CreateMaybeMessage<::EncryptedMessage>(Arena*);
template<> ::KeyExchange* Arena::CreateMaybeMessage<::KeyExchange>(Arena*);
template<> ::Wrapper* Arena::CreateMaybeMessage<::Wrapper>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum MessageType : int {
  MT_UNSPECIFIED = 0,
  MT_LOGIN = 1,
  MT_REGISTRATION = 2,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = MT_UNSPECIFIED;
constexpr MessageType MessageType_MAX = MT_REGISTRATION;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class EncryptedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EncryptedMessage) */ {
 public:
  inline EncryptedMessage() : EncryptedMessage(nullptr) {}
  ~EncryptedMessage() override;
  explicit PROTOBUF_CONSTEXPR EncryptedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncryptedMessage(const EncryptedMessage& from);
  EncryptedMessage(EncryptedMessage&& from) noexcept
    : EncryptedMessage() {
    *this = ::std::move(from);
  }

  inline EncryptedMessage& operator=(const EncryptedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedMessage& operator=(EncryptedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EncryptedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptedMessage* internal_default_instance() {
    return reinterpret_cast<const EncryptedMessage*>(
               &_EncryptedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EncryptedMessage& a, EncryptedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncryptedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EncryptedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EncryptedMessage& from) {
    EncryptedMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EncryptedMessage";
  }
  protected:
  explicit EncryptedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kIvFieldNumber = 2,
    kMessageTypeFieldNumber = 3,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string iv = 2;
  void clear_iv();
  const std::string& iv() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_iv(ArgT0&& arg0, ArgT... args);
  std::string* mutable_iv();
  PROTOBUF_NODISCARD std::string* release_iv();
  void set_allocated_iv(std::string* iv);
  private:
  const std::string& _internal_iv() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iv(const std::string& value);
  std::string* _internal_mutable_iv();
  public:

  // .MessageType messageType = 3;
  void clear_messagetype();
  ::MessageType messagetype() const;
  void set_messagetype(::MessageType value);
  private:
  ::MessageType _internal_messagetype() const;
  void _internal_set_messagetype(::MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:EncryptedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iv_;
    int messagetype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KeyMessages_2eproto;
};
// -------------------------------------------------------------------

class KeyExchange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KeyExchange) */ {
 public:
  inline KeyExchange() : KeyExchange(nullptr) {}
  ~KeyExchange() override;
  explicit PROTOBUF_CONSTEXPR KeyExchange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyExchange(const KeyExchange& from);
  KeyExchange(KeyExchange&& from) noexcept
    : KeyExchange() {
    *this = ::std::move(from);
  }

  inline KeyExchange& operator=(const KeyExchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyExchange& operator=(KeyExchange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyExchange& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyExchange* internal_default_instance() {
    return reinterpret_cast<const KeyExchange*>(
               &_KeyExchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeyExchange& a, KeyExchange& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyExchange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyExchange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyExchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyExchange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyExchange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyExchange& from) {
    KeyExchange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyExchange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KeyExchange";
  }
  protected:
  explicit KeyExchange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string publicKey = 1;
  void clear_publickey();
  const std::string& publickey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_publickey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_publickey();
  PROTOBUF_NODISCARD std::string* release_publickey();
  void set_allocated_publickey(std::string* publickey);
  private:
  const std::string& _internal_publickey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_publickey(const std::string& value);
  std::string* _internal_mutable_publickey();
  public:

  // .MsgState state = 2;
  void clear_state();
  ::MsgState state() const;
  void set_state(::MsgState value);
  private:
  ::MsgState _internal_state() const;
  void _internal_set_state(::MsgState value);
  public:

  // @@protoc_insertion_point(class_scope:KeyExchange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publickey_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KeyMessages_2eproto;
};
// -------------------------------------------------------------------

class Wrapper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Wrapper) */ {
 public:
  inline Wrapper() : Wrapper(nullptr) {}
  ~Wrapper() override;
  explicit PROTOBUF_CONSTEXPR Wrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Wrapper(const Wrapper& from);
  Wrapper(Wrapper&& from) noexcept
    : Wrapper() {
    *this = ::std::move(from);
  }

  inline Wrapper& operator=(const Wrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline Wrapper& operator=(Wrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Wrapper& default_instance() {
    return *internal_default_instance();
  }
  enum MessagesCase {
    kCheckRegParameterStatus = 1,
    kRegistration = 2,
    kLogin = 3,
    kEncryptedMessage = 4,
    kKeyexchange = 5,
    MESSAGES_NOT_SET = 0,
  };

  static inline const Wrapper* internal_default_instance() {
    return reinterpret_cast<const Wrapper*>(
               &_Wrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Wrapper& a, Wrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(Wrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Wrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Wrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Wrapper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Wrapper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Wrapper& from) {
    Wrapper::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wrapper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Wrapper";
  }
  protected:
  explicit Wrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckRegParameterStatusFieldNumber = 1,
    kRegistrationFieldNumber = 2,
    kLoginFieldNumber = 3,
    kEncryptedMessageFieldNumber = 4,
    kKeyexchangeFieldNumber = 5,
  };
  // .CheckRegParameterStatus checkRegParameterStatus = 1;
  bool has_checkregparameterstatus() const;
  private:
  bool _internal_has_checkregparameterstatus() const;
  public:
  void clear_checkregparameterstatus();
  const ::CheckRegParameterStatus& checkregparameterstatus() const;
  PROTOBUF_NODISCARD ::CheckRegParameterStatus* release_checkregparameterstatus();
  ::CheckRegParameterStatus* mutable_checkregparameterstatus();
  void set_allocated_checkregparameterstatus(::CheckRegParameterStatus* checkregparameterstatus);
  private:
  const ::CheckRegParameterStatus& _internal_checkregparameterstatus() const;
  ::CheckRegParameterStatus* _internal_mutable_checkregparameterstatus();
  public:
  void unsafe_arena_set_allocated_checkregparameterstatus(
      ::CheckRegParameterStatus* checkregparameterstatus);
  ::CheckRegParameterStatus* unsafe_arena_release_checkregparameterstatus();

  // .Registration registration = 2;
  bool has_registration() const;
  private:
  bool _internal_has_registration() const;
  public:
  void clear_registration();
  const ::Registration& registration() const;
  PROTOBUF_NODISCARD ::Registration* release_registration();
  ::Registration* mutable_registration();
  void set_allocated_registration(::Registration* registration);
  private:
  const ::Registration& _internal_registration() const;
  ::Registration* _internal_mutable_registration();
  public:
  void unsafe_arena_set_allocated_registration(
      ::Registration* registration);
  ::Registration* unsafe_arena_release_registration();

  // .Login login = 3;
  bool has_login() const;
  private:
  bool _internal_has_login() const;
  public:
  void clear_login();
  const ::Login& login() const;
  PROTOBUF_NODISCARD ::Login* release_login();
  ::Login* mutable_login();
  void set_allocated_login(::Login* login);
  private:
  const ::Login& _internal_login() const;
  ::Login* _internal_mutable_login();
  public:
  void unsafe_arena_set_allocated_login(
      ::Login* login);
  ::Login* unsafe_arena_release_login();

  // .EncryptedMessage encryptedMessage = 4;
  bool has_encryptedmessage() const;
  private:
  bool _internal_has_encryptedmessage() const;
  public:
  void clear_encryptedmessage();
  const ::EncryptedMessage& encryptedmessage() const;
  PROTOBUF_NODISCARD ::EncryptedMessage* release_encryptedmessage();
  ::EncryptedMessage* mutable_encryptedmessage();
  void set_allocated_encryptedmessage(::EncryptedMessage* encryptedmessage);
  private:
  const ::EncryptedMessage& _internal_encryptedmessage() const;
  ::EncryptedMessage* _internal_mutable_encryptedmessage();
  public:
  void unsafe_arena_set_allocated_encryptedmessage(
      ::EncryptedMessage* encryptedmessage);
  ::EncryptedMessage* unsafe_arena_release_encryptedmessage();

  // .KeyExchange keyexchange = 5;
  bool has_keyexchange() const;
  private:
  bool _internal_has_keyexchange() const;
  public:
  void clear_keyexchange();
  const ::KeyExchange& keyexchange() const;
  PROTOBUF_NODISCARD ::KeyExchange* release_keyexchange();
  ::KeyExchange* mutable_keyexchange();
  void set_allocated_keyexchange(::KeyExchange* keyexchange);
  private:
  const ::KeyExchange& _internal_keyexchange() const;
  ::KeyExchange* _internal_mutable_keyexchange();
  public:
  void unsafe_arena_set_allocated_keyexchange(
      ::KeyExchange* keyexchange);
  ::KeyExchange* unsafe_arena_release_keyexchange();

  void clear_Messages();
  MessagesCase Messages_case() const;
  // @@protoc_insertion_point(class_scope:Wrapper)
 private:
  class _Internal;
  void set_has_checkregparameterstatus();
  void set_has_registration();
  void set_has_login();
  void set_has_encryptedmessage();
  void set_has_keyexchange();

  inline bool has_Messages() const;
  inline void clear_has_Messages();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union MessagesUnion {
      constexpr MessagesUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::CheckRegParameterStatus* checkregparameterstatus_;
      ::Registration* registration_;
      ::Login* login_;
      ::EncryptedMessage* encryptedmessage_;
      ::KeyExchange* keyexchange_;
    } Messages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KeyMessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EncryptedMessage

// string message = 1;
inline void EncryptedMessage::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& EncryptedMessage::message() const {
  // @@protoc_insertion_point(field_get:EncryptedMessage.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptedMessage::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EncryptedMessage.message)
}
inline std::string* EncryptedMessage::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:EncryptedMessage.message)
  return _s;
}
inline const std::string& EncryptedMessage::_internal_message() const {
  return _impl_.message_.Get();
}
inline void EncryptedMessage::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptedMessage::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* EncryptedMessage::release_message() {
  // @@protoc_insertion_point(field_release:EncryptedMessage.message)
  return _impl_.message_.Release();
}
inline void EncryptedMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EncryptedMessage.message)
}

// string iv = 2;
inline void EncryptedMessage::clear_iv() {
  _impl_.iv_.ClearToEmpty();
}
inline const std::string& EncryptedMessage::iv() const {
  // @@protoc_insertion_point(field_get:EncryptedMessage.iv)
  return _internal_iv();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptedMessage::set_iv(ArgT0&& arg0, ArgT... args) {
 
 _impl_.iv_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EncryptedMessage.iv)
}
inline std::string* EncryptedMessage::mutable_iv() {
  std::string* _s = _internal_mutable_iv();
  // @@protoc_insertion_point(field_mutable:EncryptedMessage.iv)
  return _s;
}
inline const std::string& EncryptedMessage::_internal_iv() const {
  return _impl_.iv_.Get();
}
inline void EncryptedMessage::_internal_set_iv(const std::string& value) {
  
  _impl_.iv_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptedMessage::_internal_mutable_iv() {
  
  return _impl_.iv_.Mutable(GetArenaForAllocation());
}
inline std::string* EncryptedMessage::release_iv() {
  // @@protoc_insertion_point(field_release:EncryptedMessage.iv)
  return _impl_.iv_.Release();
}
inline void EncryptedMessage::set_allocated_iv(std::string* iv) {
  if (iv != nullptr) {
    
  } else {
    
  }
  _impl_.iv_.SetAllocated(iv, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.iv_.IsDefault()) {
    _impl_.iv_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EncryptedMessage.iv)
}

// .MessageType messageType = 3;
inline void EncryptedMessage::clear_messagetype() {
  _impl_.messagetype_ = 0;
}
inline ::MessageType EncryptedMessage::_internal_messagetype() const {
  return static_cast< ::MessageType >(_impl_.messagetype_);
}
inline ::MessageType EncryptedMessage::messagetype() const {
  // @@protoc_insertion_point(field_get:EncryptedMessage.messageType)
  return _internal_messagetype();
}
inline void EncryptedMessage::_internal_set_messagetype(::MessageType value) {
  
  _impl_.messagetype_ = value;
}
inline void EncryptedMessage::set_messagetype(::MessageType value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:EncryptedMessage.messageType)
}

// -------------------------------------------------------------------

// KeyExchange

// string publicKey = 1;
inline void KeyExchange::clear_publickey() {
  _impl_.publickey_.ClearToEmpty();
}
inline const std::string& KeyExchange::publickey() const {
  // @@protoc_insertion_point(field_get:KeyExchange.publicKey)
  return _internal_publickey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyExchange::set_publickey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.publickey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KeyExchange.publicKey)
}
inline std::string* KeyExchange::mutable_publickey() {
  std::string* _s = _internal_mutable_publickey();
  // @@protoc_insertion_point(field_mutable:KeyExchange.publicKey)
  return _s;
}
inline const std::string& KeyExchange::_internal_publickey() const {
  return _impl_.publickey_.Get();
}
inline void KeyExchange::_internal_set_publickey(const std::string& value) {
  
  _impl_.publickey_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyExchange::_internal_mutable_publickey() {
  
  return _impl_.publickey_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyExchange::release_publickey() {
  // @@protoc_insertion_point(field_release:KeyExchange.publicKey)
  return _impl_.publickey_.Release();
}
inline void KeyExchange::set_allocated_publickey(std::string* publickey) {
  if (publickey != nullptr) {
    
  } else {
    
  }
  _impl_.publickey_.SetAllocated(publickey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.publickey_.IsDefault()) {
    _impl_.publickey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:KeyExchange.publicKey)
}

// .MsgState state = 2;
inline void KeyExchange::clear_state() {
  _impl_.state_ = 0;
}
inline ::MsgState KeyExchange::_internal_state() const {
  return static_cast< ::MsgState >(_impl_.state_);
}
inline ::MsgState KeyExchange::state() const {
  // @@protoc_insertion_point(field_get:KeyExchange.state)
  return _internal_state();
}
inline void KeyExchange::_internal_set_state(::MsgState value) {
  
  _impl_.state_ = value;
}
inline void KeyExchange::set_state(::MsgState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:KeyExchange.state)
}

// -------------------------------------------------------------------

// Wrapper

// .CheckRegParameterStatus checkRegParameterStatus = 1;
inline bool Wrapper::_internal_has_checkregparameterstatus() const {
  return Messages_case() == kCheckRegParameterStatus;
}
inline bool Wrapper::has_checkregparameterstatus() const {
  return _internal_has_checkregparameterstatus();
}
inline void Wrapper::set_has_checkregparameterstatus() {
  _impl_._oneof_case_[0] = kCheckRegParameterStatus;
}
inline ::CheckRegParameterStatus* Wrapper::release_checkregparameterstatus() {
  // @@protoc_insertion_point(field_release:Wrapper.checkRegParameterStatus)
  if (_internal_has_checkregparameterstatus()) {
    clear_has_Messages();
    ::CheckRegParameterStatus* temp = _impl_.Messages_.checkregparameterstatus_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Messages_.checkregparameterstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::CheckRegParameterStatus& Wrapper::_internal_checkregparameterstatus() const {
  return _internal_has_checkregparameterstatus()
      ? *_impl_.Messages_.checkregparameterstatus_
      : reinterpret_cast< ::CheckRegParameterStatus&>(::_CheckRegParameterStatus_default_instance_);
}
inline const ::CheckRegParameterStatus& Wrapper::checkregparameterstatus() const {
  // @@protoc_insertion_point(field_get:Wrapper.checkRegParameterStatus)
  return _internal_checkregparameterstatus();
}
inline ::CheckRegParameterStatus* Wrapper::unsafe_arena_release_checkregparameterstatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Wrapper.checkRegParameterStatus)
  if (_internal_has_checkregparameterstatus()) {
    clear_has_Messages();
    ::CheckRegParameterStatus* temp = _impl_.Messages_.checkregparameterstatus_;
    _impl_.Messages_.checkregparameterstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_checkregparameterstatus(::CheckRegParameterStatus* checkregparameterstatus) {
  clear_Messages();
  if (checkregparameterstatus) {
    set_has_checkregparameterstatus();
    _impl_.Messages_.checkregparameterstatus_ = checkregparameterstatus;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Wrapper.checkRegParameterStatus)
}
inline ::CheckRegParameterStatus* Wrapper::_internal_mutable_checkregparameterstatus() {
  if (!_internal_has_checkregparameterstatus()) {
    clear_Messages();
    set_has_checkregparameterstatus();
    _impl_.Messages_.checkregparameterstatus_ = CreateMaybeMessage< ::CheckRegParameterStatus >(GetArenaForAllocation());
  }
  return _impl_.Messages_.checkregparameterstatus_;
}
inline ::CheckRegParameterStatus* Wrapper::mutable_checkregparameterstatus() {
  ::CheckRegParameterStatus* _msg = _internal_mutable_checkregparameterstatus();
  // @@protoc_insertion_point(field_mutable:Wrapper.checkRegParameterStatus)
  return _msg;
}

// .Registration registration = 2;
inline bool Wrapper::_internal_has_registration() const {
  return Messages_case() == kRegistration;
}
inline bool Wrapper::has_registration() const {
  return _internal_has_registration();
}
inline void Wrapper::set_has_registration() {
  _impl_._oneof_case_[0] = kRegistration;
}
inline ::Registration* Wrapper::release_registration() {
  // @@protoc_insertion_point(field_release:Wrapper.registration)
  if (_internal_has_registration()) {
    clear_has_Messages();
    ::Registration* temp = _impl_.Messages_.registration_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Messages_.registration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Registration& Wrapper::_internal_registration() const {
  return _internal_has_registration()
      ? *_impl_.Messages_.registration_
      : reinterpret_cast< ::Registration&>(::_Registration_default_instance_);
}
inline const ::Registration& Wrapper::registration() const {
  // @@protoc_insertion_point(field_get:Wrapper.registration)
  return _internal_registration();
}
inline ::Registration* Wrapper::unsafe_arena_release_registration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Wrapper.registration)
  if (_internal_has_registration()) {
    clear_has_Messages();
    ::Registration* temp = _impl_.Messages_.registration_;
    _impl_.Messages_.registration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_registration(::Registration* registration) {
  clear_Messages();
  if (registration) {
    set_has_registration();
    _impl_.Messages_.registration_ = registration;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Wrapper.registration)
}
inline ::Registration* Wrapper::_internal_mutable_registration() {
  if (!_internal_has_registration()) {
    clear_Messages();
    set_has_registration();
    _impl_.Messages_.registration_ = CreateMaybeMessage< ::Registration >(GetArenaForAllocation());
  }
  return _impl_.Messages_.registration_;
}
inline ::Registration* Wrapper::mutable_registration() {
  ::Registration* _msg = _internal_mutable_registration();
  // @@protoc_insertion_point(field_mutable:Wrapper.registration)
  return _msg;
}

// .Login login = 3;
inline bool Wrapper::_internal_has_login() const {
  return Messages_case() == kLogin;
}
inline bool Wrapper::has_login() const {
  return _internal_has_login();
}
inline void Wrapper::set_has_login() {
  _impl_._oneof_case_[0] = kLogin;
}
inline ::Login* Wrapper::release_login() {
  // @@protoc_insertion_point(field_release:Wrapper.login)
  if (_internal_has_login()) {
    clear_has_Messages();
    ::Login* temp = _impl_.Messages_.login_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Messages_.login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Login& Wrapper::_internal_login() const {
  return _internal_has_login()
      ? *_impl_.Messages_.login_
      : reinterpret_cast< ::Login&>(::_Login_default_instance_);
}
inline const ::Login& Wrapper::login() const {
  // @@protoc_insertion_point(field_get:Wrapper.login)
  return _internal_login();
}
inline ::Login* Wrapper::unsafe_arena_release_login() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Wrapper.login)
  if (_internal_has_login()) {
    clear_has_Messages();
    ::Login* temp = _impl_.Messages_.login_;
    _impl_.Messages_.login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_login(::Login* login) {
  clear_Messages();
  if (login) {
    set_has_login();
    _impl_.Messages_.login_ = login;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Wrapper.login)
}
inline ::Login* Wrapper::_internal_mutable_login() {
  if (!_internal_has_login()) {
    clear_Messages();
    set_has_login();
    _impl_.Messages_.login_ = CreateMaybeMessage< ::Login >(GetArenaForAllocation());
  }
  return _impl_.Messages_.login_;
}
inline ::Login* Wrapper::mutable_login() {
  ::Login* _msg = _internal_mutable_login();
  // @@protoc_insertion_point(field_mutable:Wrapper.login)
  return _msg;
}

// .EncryptedMessage encryptedMessage = 4;
inline bool Wrapper::_internal_has_encryptedmessage() const {
  return Messages_case() == kEncryptedMessage;
}
inline bool Wrapper::has_encryptedmessage() const {
  return _internal_has_encryptedmessage();
}
inline void Wrapper::set_has_encryptedmessage() {
  _impl_._oneof_case_[0] = kEncryptedMessage;
}
inline void Wrapper::clear_encryptedmessage() {
  if (_internal_has_encryptedmessage()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Messages_.encryptedmessage_;
    }
    clear_has_Messages();
  }
}
inline ::EncryptedMessage* Wrapper::release_encryptedmessage() {
  // @@protoc_insertion_point(field_release:Wrapper.encryptedMessage)
  if (_internal_has_encryptedmessage()) {
    clear_has_Messages();
    ::EncryptedMessage* temp = _impl_.Messages_.encryptedmessage_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Messages_.encryptedmessage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::EncryptedMessage& Wrapper::_internal_encryptedmessage() const {
  return _internal_has_encryptedmessage()
      ? *_impl_.Messages_.encryptedmessage_
      : reinterpret_cast< ::EncryptedMessage&>(::_EncryptedMessage_default_instance_);
}
inline const ::EncryptedMessage& Wrapper::encryptedmessage() const {
  // @@protoc_insertion_point(field_get:Wrapper.encryptedMessage)
  return _internal_encryptedmessage();
}
inline ::EncryptedMessage* Wrapper::unsafe_arena_release_encryptedmessage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Wrapper.encryptedMessage)
  if (_internal_has_encryptedmessage()) {
    clear_has_Messages();
    ::EncryptedMessage* temp = _impl_.Messages_.encryptedmessage_;
    _impl_.Messages_.encryptedmessage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_encryptedmessage(::EncryptedMessage* encryptedmessage) {
  clear_Messages();
  if (encryptedmessage) {
    set_has_encryptedmessage();
    _impl_.Messages_.encryptedmessage_ = encryptedmessage;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Wrapper.encryptedMessage)
}
inline ::EncryptedMessage* Wrapper::_internal_mutable_encryptedmessage() {
  if (!_internal_has_encryptedmessage()) {
    clear_Messages();
    set_has_encryptedmessage();
    _impl_.Messages_.encryptedmessage_ = CreateMaybeMessage< ::EncryptedMessage >(GetArenaForAllocation());
  }
  return _impl_.Messages_.encryptedmessage_;
}
inline ::EncryptedMessage* Wrapper::mutable_encryptedmessage() {
  ::EncryptedMessage* _msg = _internal_mutable_encryptedmessage();
  // @@protoc_insertion_point(field_mutable:Wrapper.encryptedMessage)
  return _msg;
}

// .KeyExchange keyexchange = 5;
inline bool Wrapper::_internal_has_keyexchange() const {
  return Messages_case() == kKeyexchange;
}
inline bool Wrapper::has_keyexchange() const {
  return _internal_has_keyexchange();
}
inline void Wrapper::set_has_keyexchange() {
  _impl_._oneof_case_[0] = kKeyexchange;
}
inline void Wrapper::clear_keyexchange() {
  if (_internal_has_keyexchange()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Messages_.keyexchange_;
    }
    clear_has_Messages();
  }
}
inline ::KeyExchange* Wrapper::release_keyexchange() {
  // @@protoc_insertion_point(field_release:Wrapper.keyexchange)
  if (_internal_has_keyexchange()) {
    clear_has_Messages();
    ::KeyExchange* temp = _impl_.Messages_.keyexchange_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.Messages_.keyexchange_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KeyExchange& Wrapper::_internal_keyexchange() const {
  return _internal_has_keyexchange()
      ? *_impl_.Messages_.keyexchange_
      : reinterpret_cast< ::KeyExchange&>(::_KeyExchange_default_instance_);
}
inline const ::KeyExchange& Wrapper::keyexchange() const {
  // @@protoc_insertion_point(field_get:Wrapper.keyexchange)
  return _internal_keyexchange();
}
inline ::KeyExchange* Wrapper::unsafe_arena_release_keyexchange() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Wrapper.keyexchange)
  if (_internal_has_keyexchange()) {
    clear_has_Messages();
    ::KeyExchange* temp = _impl_.Messages_.keyexchange_;
    _impl_.Messages_.keyexchange_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Wrapper::unsafe_arena_set_allocated_keyexchange(::KeyExchange* keyexchange) {
  clear_Messages();
  if (keyexchange) {
    set_has_keyexchange();
    _impl_.Messages_.keyexchange_ = keyexchange;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Wrapper.keyexchange)
}
inline ::KeyExchange* Wrapper::_internal_mutable_keyexchange() {
  if (!_internal_has_keyexchange()) {
    clear_Messages();
    set_has_keyexchange();
    _impl_.Messages_.keyexchange_ = CreateMaybeMessage< ::KeyExchange >(GetArenaForAllocation());
  }
  return _impl_.Messages_.keyexchange_;
}
inline ::KeyExchange* Wrapper::mutable_keyexchange() {
  ::KeyExchange* _msg = _internal_mutable_keyexchange();
  // @@protoc_insertion_point(field_mutable:Wrapper.keyexchange)
  return _msg;
}

inline bool Wrapper::has_Messages() const {
  return Messages_case() != MESSAGES_NOT_SET;
}
inline void Wrapper::clear_has_Messages() {
  _impl_._oneof_case_[0] = MESSAGES_NOT_SET;
}
inline Wrapper::MessagesCase Wrapper::Messages_case() const {
  return Wrapper::MessagesCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageType>() {
  return ::MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_KeyMessages_2eproto
