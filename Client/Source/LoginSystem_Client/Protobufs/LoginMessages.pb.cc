// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginMessages.proto
#pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
#pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
#pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
#pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
#pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
#pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
#pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
#pragma warning (disable:4307) // 'operator' : integral constant overflow
#pragma warning (disable:4309) // 'conversion' : truncation of constant value
#pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
#pragma warning (disable:4355) // 'this' : used in base member initializer list
#pragma warning (disable:4506) // no definition for inline function 'function'
#pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
#pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
#pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'

#include "LoginMessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CheckRegParameterStatus::CheckRegParameterStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.v1_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CheckRegParameterStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckRegParameterStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckRegParameterStatusDefaultTypeInternal() {}
  union {
    CheckRegParameterStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckRegParameterStatusDefaultTypeInternal _CheckRegParameterStatus_default_instance_;
PROTOBUF_CONSTEXPR Login::Login(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginDefaultTypeInternal() {}
  union {
    Login _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginDefaultTypeInternal _Login_default_instance_;
PROTOBUF_CONSTEXPR Registration::Registration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mail_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegistrationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistrationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistrationDefaultTypeInternal() {}
  union {
    Registration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistrationDefaultTypeInternal _Registration_default_instance_;
static ::_pb::Metadata file_level_metadata_LoginMessages_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_LoginMessages_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_LoginMessages_2eproto = nullptr;

const uint32_t TableStruct_LoginMessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CheckRegParameterStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CheckRegParameterStatus, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CheckRegParameterStatus, _impl_.v1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Login, _impl_.mail_),
  PROTOBUF_FIELD_OFFSET(::Login, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::Login, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Registration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Registration, _impl_.login_),
  PROTOBUF_FIELD_OFFSET(::Registration, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::Registration, _impl_.mail_),
  PROTOBUF_FIELD_OFFSET(::Registration, _impl_.state_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::CheckRegParameterStatus)},
  { 11, -1, -1, sizeof(::Login)},
  { 20, -1, -1, sizeof(::Registration)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CheckRegParameterStatus_default_instance_._instance,
  &::_Login_default_instance_._instance,
  &::_Registration_default_instance_._instance,
};

const char descriptor_table_protodef_LoginMessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023LoginMessages.proto\"m\n\027CheckRegParamet"
  "erStatus\022\017\n\005login\030\001 \001(\tH\000\022\016\n\004mail\030\002 \001(\tH"
  "\000\022\025\n\013loginStatus\030\003 \001(\010H\000\022\024\n\nmailStatus\030\004"
  " \001(\010H\000B\004\n\002v1\"=\n\005Login\022\014\n\004mail\030\001 \001(\t\022\014\n\004h"
  "ash\030\002 \001(\t\022\030\n\005state\030\003 \001(\0162\t.MsgState\"S\n\014R"
  "egistration\022\r\n\005login\030\001 \001(\t\022\014\n\004hash\030\002 \001(\t"
  "\022\014\n\004mail\030\003 \001(\t\022\030\n\005state\030\004 \001(\0162\t.MsgState"
  "*8\n\010MsgState\022\014\n\010MS_ERROR\020\000\022\013\n\007MS_INIT\020\001\022"
  "\021\n\rMS_SUCCESSFUL\020\002B%\n\024com.server.Protobu"
  "fsB\rLoginMessagesb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_LoginMessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_LoginMessages_2eproto = {
    false, false, 385, descriptor_table_protodef_LoginMessages_2eproto,
    "LoginMessages.proto",
    &descriptor_table_LoginMessages_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_LoginMessages_2eproto::offsets,
    file_level_metadata_LoginMessages_2eproto, file_level_enum_descriptors_LoginMessages_2eproto,
    file_level_service_descriptors_LoginMessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_LoginMessages_2eproto_getter() {
  return &descriptor_table_LoginMessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_LoginMessages_2eproto(&descriptor_table_LoginMessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_LoginMessages_2eproto);
  return file_level_enum_descriptors_LoginMessages_2eproto[0];
}
bool MsgState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CheckRegParameterStatus::_Internal {
 public:
};

CheckRegParameterStatus::CheckRegParameterStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CheckRegParameterStatus)
}
CheckRegParameterStatus::CheckRegParameterStatus(const CheckRegParameterStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckRegParameterStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.v1_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_v1();
  switch (from.v1_case()) {
    case kLogin: {
      _this->_internal_set_login(from._internal_login());
      break;
    }
    case kMail: {
      _this->_internal_set_mail(from._internal_mail());
      break;
    }
    case kLoginStatus: {
      _this->_internal_set_loginstatus(from._internal_loginstatus());
      break;
    }
    case kMailStatus: {
      _this->_internal_set_mailstatus(from._internal_mailstatus());
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CheckRegParameterStatus)
}

inline void CheckRegParameterStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.v1_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_v1();
}

CheckRegParameterStatus::~CheckRegParameterStatus() {
  // @@protoc_insertion_point(destructor:CheckRegParameterStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CheckRegParameterStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_v1()) {
    clear_v1();
  }
}

void CheckRegParameterStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckRegParameterStatus::clear_v1() {
// @@protoc_insertion_point(one_of_clear_start:CheckRegParameterStatus)
  switch (v1_case()) {
    case kLogin: {
      _impl_.v1_.login_.Destroy();
      break;
    }
    case kMail: {
      _impl_.v1_.mail_.Destroy();
      break;
    }
    case kLoginStatus: {
      // No need to clear
      break;
    }
    case kMailStatus: {
      // No need to clear
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = V1_NOT_SET;
}


void CheckRegParameterStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CheckRegParameterStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_v1();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckRegParameterStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CheckRegParameterStatus.login"));
        } else
          goto handle_unusual;
        continue;
      // string mail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CheckRegParameterStatus.mail"));
        } else
          goto handle_unusual;
        continue;
      // bool loginStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_loginstatus(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool mailStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_mailstatus(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckRegParameterStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CheckRegParameterStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string login = 1;
  if (_internal_has_login()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login().data(), static_cast<int>(this->_internal_login().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CheckRegParameterStatus.login");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_login(), target);
  }

  // string mail = 2;
  if (_internal_has_mail()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mail().data(), static_cast<int>(this->_internal_mail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CheckRegParameterStatus.mail");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mail(), target);
  }

  // bool loginStatus = 3;
  if (_internal_has_loginstatus()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_loginstatus(), target);
  }

  // bool mailStatus = 4;
  if (_internal_has_mailstatus()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_mailstatus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CheckRegParameterStatus)
  return target;
}

size_t CheckRegParameterStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CheckRegParameterStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (v1_case()) {
    // string login = 1;
    case kLogin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_login());
      break;
    }
    // string mail = 2;
    case kMail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mail());
      break;
    }
    // bool loginStatus = 3;
    case kLoginStatus: {
      total_size += 1 + 1;
      break;
    }
    // bool mailStatus = 4;
    case kMailStatus: {
      total_size += 1 + 1;
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckRegParameterStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckRegParameterStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckRegParameterStatus::GetClassData() const { return &_class_data_; }


void CheckRegParameterStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckRegParameterStatus*>(&to_msg);
  auto& from = static_cast<const CheckRegParameterStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CheckRegParameterStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.v1_case()) {
    case kLogin: {
      _this->_internal_set_login(from._internal_login());
      break;
    }
    case kMail: {
      _this->_internal_set_mail(from._internal_mail());
      break;
    }
    case kLoginStatus: {
      _this->_internal_set_loginstatus(from._internal_loginstatus());
      break;
    }
    case kMailStatus: {
      _this->_internal_set_mailstatus(from._internal_mailstatus());
      break;
    }
    case V1_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckRegParameterStatus::CopyFrom(const CheckRegParameterStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CheckRegParameterStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckRegParameterStatus::IsInitialized() const {
  return true;
}

void CheckRegParameterStatus::InternalSwap(CheckRegParameterStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.v1_, other->_impl_.v1_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckRegParameterStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_LoginMessages_2eproto_getter, &descriptor_table_LoginMessages_2eproto_once,
      file_level_metadata_LoginMessages_2eproto[0]);
}

// ===================================================================

class Login::_Internal {
 public:
};

Login::Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Login)
}
Login::Login(const Login& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Login* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mail_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mail().empty()) {
    _this->_impl_.mail_.Set(from._internal_mail(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:Login)
}

inline void Login::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mail_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:Login)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Login::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mail_.Destroy();
  _impl_.hash_.Destroy();
}

void Login::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Login::Clear() {
// @@protoc_insertion_point(message_clear_start:Login)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mail_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _impl_.state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Login::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mail = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Login.mail"));
        } else
          goto handle_unusual;
        continue;
      // string hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Login.hash"));
        } else
          goto handle_unusual;
        continue;
      // .MsgState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::MsgState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Login::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Login)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mail = 1;
  if (!this->_internal_mail().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mail().data(), static_cast<int>(this->_internal_mail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Login.mail");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mail(), target);
  }

  // string hash = 2;
  if (!this->_internal_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Login.hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hash(), target);
  }

  // .MsgState state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Login)
  return target;
}

size_t Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Login)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mail = 1;
  if (!this->_internal_mail().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mail());
  }

  // string hash = 2;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // .MsgState state = 3;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Login::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Login::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Login::GetClassData() const { return &_class_data_; }


void Login::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Login*>(&to_msg);
  auto& from = static_cast<const Login&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Login)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mail().empty()) {
    _this->_internal_set_mail(from._internal_mail());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Login::CopyFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  return true;
}

void Login::InternalSwap(Login* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mail_, lhs_arena,
      &other->_impl_.mail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Login::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_LoginMessages_2eproto_getter, &descriptor_table_LoginMessages_2eproto_once,
      file_level_metadata_LoginMessages_2eproto[1]);
}

// ===================================================================

class Registration::_Internal {
 public:
};

Registration::Registration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Registration)
}
Registration::Registration(const Registration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Registration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.mail_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login().empty()) {
    _this->_impl_.login_.Set(from._internal_login(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mail().empty()) {
    _this->_impl_.mail_.Set(from._internal_mail(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:Registration)
}

inline void Registration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_){}
    , decltype(_impl_.hash_){}
    , decltype(_impl_.mail_){}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mail_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Registration::~Registration() {
  // @@protoc_insertion_point(destructor:Registration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Registration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_.Destroy();
  _impl_.hash_.Destroy();
  _impl_.mail_.Destroy();
}

void Registration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Registration::Clear() {
// @@protoc_insertion_point(message_clear_start:Registration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_.ClearToEmpty();
  _impl_.hash_.ClearToEmpty();
  _impl_.mail_.ClearToEmpty();
  _impl_.state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Registration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string login = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_login();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Registration.login"));
        } else
          goto handle_unusual;
        continue;
      // string hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Registration.hash"));
        } else
          goto handle_unusual;
        continue;
      // string mail = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Registration.mail"));
        } else
          goto handle_unusual;
        continue;
      // .MsgState state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::MsgState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Registration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Registration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string login = 1;
  if (!this->_internal_login().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login().data(), static_cast<int>(this->_internal_login().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Registration.login");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_login(), target);
  }

  // string hash = 2;
  if (!this->_internal_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Registration.hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hash(), target);
  }

  // string mail = 3;
  if (!this->_internal_mail().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mail().data(), static_cast<int>(this->_internal_mail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Registration.mail");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mail(), target);
  }

  // .MsgState state = 4;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Registration)
  return target;
}

size_t Registration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Registration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string login = 1;
  if (!this->_internal_login().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_login());
  }

  // string hash = 2;
  if (!this->_internal_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // string mail = 3;
  if (!this->_internal_mail().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mail());
  }

  // .MsgState state = 4;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Registration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Registration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Registration::GetClassData() const { return &_class_data_; }


void Registration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Registration*>(&to_msg);
  auto& from = static_cast<const Registration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Registration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_login().empty()) {
    _this->_internal_set_login(from._internal_login());
  }
  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (!from._internal_mail().empty()) {
    _this->_internal_set_mail(from._internal_mail());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Registration::CopyFrom(const Registration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Registration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Registration::IsInitialized() const {
  return true;
}

void Registration::InternalSwap(Registration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_, lhs_arena,
      &other->_impl_.login_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hash_, lhs_arena,
      &other->_impl_.hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mail_, lhs_arena,
      &other->_impl_.mail_, rhs_arena
  );
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Registration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_LoginMessages_2eproto_getter, &descriptor_table_LoginMessages_2eproto_once,
      file_level_metadata_LoginMessages_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CheckRegParameterStatus*
Arena::CreateMaybeMessage< ::CheckRegParameterStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CheckRegParameterStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::Login*
Arena::CreateMaybeMessage< ::Login >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Login >(arena);
}
template<> PROTOBUF_NOINLINE ::Registration*
Arena::CreateMaybeMessage< ::Registration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Registration >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
