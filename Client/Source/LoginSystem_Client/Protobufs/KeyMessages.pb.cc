// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KeyMessages.proto
#pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
#pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
#pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
#pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
#pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
#pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
#pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
#pragma warning (disable:4307) // 'operator' : integral constant overflow
#pragma warning (disable:4309) // 'conversion' : truncation of constant value
#pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
#pragma warning (disable:4355) // 'this' : used in base member initializer list
#pragma warning (disable:4506) // no definition for inline function 'function'
#pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
#pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
#pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'

#include "KeyMessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR EncryptedMessage::EncryptedMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.iv_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.messagetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EncryptedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncryptedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncryptedMessageDefaultTypeInternal() {}
  union {
    EncryptedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncryptedMessageDefaultTypeInternal _EncryptedMessage_default_instance_;
PROTOBUF_CONSTEXPR KeyExchange::KeyExchange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.publickey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeyExchangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyExchangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyExchangeDefaultTypeInternal() {}
  union {
    KeyExchange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyExchangeDefaultTypeInternal _KeyExchange_default_instance_;
PROTOBUF_CONSTEXPR Wrapper::Wrapper(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.Messages_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct WrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WrapperDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WrapperDefaultTypeInternal() {}
  union {
    Wrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WrapperDefaultTypeInternal _Wrapper_default_instance_;
static ::_pb::Metadata file_level_metadata_KeyMessages_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_KeyMessages_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_KeyMessages_2eproto = nullptr;

const uint32_t TableStruct_KeyMessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EncryptedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::EncryptedMessage, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::EncryptedMessage, _impl_.iv_),
  PROTOBUF_FIELD_OFFSET(::EncryptedMessage, _impl_.messagetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KeyExchange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KeyExchange, _impl_.publickey_),
  PROTOBUF_FIELD_OFFSET(::KeyExchange, _impl_.state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Wrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Wrapper, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Wrapper, _impl_.Messages_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::EncryptedMessage)},
  { 9, -1, -1, sizeof(::KeyExchange)},
  { 17, -1, -1, sizeof(::Wrapper)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_EncryptedMessage_default_instance_._instance,
  &::_KeyExchange_default_instance_._instance,
  &::_Wrapper_default_instance_._instance,
};

const char descriptor_table_protodef_KeyMessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021KeyMessages.proto\032\023LoginMessages.proto"
  "\"R\n\020EncryptedMessage\022\017\n\007message\030\001 \001(\t\022\n\n"
  "\002iv\030\002 \001(\t\022!\n\013messageType\030\003 \001(\0162\014.Message"
  "Type\":\n\013KeyExchange\022\021\n\tpublicKey\030\001 \001(\t\022\030"
  "\n\005state\030\002 \001(\0162\t.MsgState\"\346\001\n\007Wrapper\022;\n\027"
  "checkRegParameterStatus\030\001 \001(\0132\030.CheckReg"
  "ParameterStatusH\000\022%\n\014registration\030\002 \001(\0132"
  "\r.RegistrationH\000\022\027\n\005login\030\003 \001(\0132\006.LoginH"
  "\000\022-\n\020encryptedMessage\030\004 \001(\0132\021.EncryptedM"
  "essageH\000\022#\n\013keyexchange\030\005 \001(\0132\014.KeyExcha"
  "ngeH\000B\n\n\010Messages*D\n\013MessageType\022\022\n\016MT_U"
  "NSPECIFIED\020\000\022\014\n\010MT_LOGIN\020\001\022\023\n\017MT_REGISTR"
  "ATION\020\002B#\n\024com.server.ProtobufsB\013KeyMess"
  "agesb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_KeyMessages_2eproto_deps[1] = {
  &::descriptor_table_LoginMessages_2eproto,
};
static ::_pbi::once_flag descriptor_table_KeyMessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_KeyMessages_2eproto = {
    false, false, 532, descriptor_table_protodef_KeyMessages_2eproto,
    "KeyMessages.proto",
    &descriptor_table_KeyMessages_2eproto_once, descriptor_table_KeyMessages_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_KeyMessages_2eproto::offsets,
    file_level_metadata_KeyMessages_2eproto, file_level_enum_descriptors_KeyMessages_2eproto,
    file_level_service_descriptors_KeyMessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_KeyMessages_2eproto_getter() {
  return &descriptor_table_KeyMessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_KeyMessages_2eproto(&descriptor_table_KeyMessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_KeyMessages_2eproto);
  return file_level_enum_descriptors_KeyMessages_2eproto[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class EncryptedMessage::_Internal {
 public:
};

EncryptedMessage::EncryptedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:EncryptedMessage)
}
EncryptedMessage::EncryptedMessage(const EncryptedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EncryptedMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.iv_){}
    , decltype(_impl_.messagetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_iv().empty()) {
    _this->_impl_.iv_.Set(from._internal_iv(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.messagetype_ = from._impl_.messagetype_;
  // @@protoc_insertion_point(copy_constructor:EncryptedMessage)
}

inline void EncryptedMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.iv_){}
    , decltype(_impl_.messagetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.iv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EncryptedMessage::~EncryptedMessage() {
  // @@protoc_insertion_point(destructor:EncryptedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncryptedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.iv_.Destroy();
}

void EncryptedMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EncryptedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:EncryptedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.iv_.ClearToEmpty();
  _impl_.messagetype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncryptedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "EncryptedMessage.message"));
        } else
          goto handle_unusual;
        continue;
      // string iv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_iv();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "EncryptedMessage.iv"));
        } else
          goto handle_unusual;
        continue;
      // .MessageType messageType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_messagetype(static_cast<::MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncryptedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EncryptedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EncryptedMessage.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // string iv = 2;
  if (!this->_internal_iv().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_iv().data(), static_cast<int>(this->_internal_iv().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EncryptedMessage.iv");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_iv(), target);
  }

  // .MessageType messageType = 3;
  if (this->_internal_messagetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_messagetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EncryptedMessage)
  return target;
}

size_t EncryptedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EncryptedMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string iv = 2;
  if (!this->_internal_iv().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_iv());
  }

  // .MessageType messageType = 3;
  if (this->_internal_messagetype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EncryptedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EncryptedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EncryptedMessage::GetClassData() const { return &_class_data_; }


void EncryptedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EncryptedMessage*>(&to_msg);
  auto& from = static_cast<const EncryptedMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:EncryptedMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_iv().empty()) {
    _this->_internal_set_iv(from._internal_iv());
  }
  if (from._internal_messagetype() != 0) {
    _this->_internal_set_messagetype(from._internal_messagetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EncryptedMessage::CopyFrom(const EncryptedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EncryptedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedMessage::IsInitialized() const {
  return true;
}

void EncryptedMessage::InternalSwap(EncryptedMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.iv_, lhs_arena,
      &other->_impl_.iv_, rhs_arena
  );
  swap(_impl_.messagetype_, other->_impl_.messagetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EncryptedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KeyMessages_2eproto_getter, &descriptor_table_KeyMessages_2eproto_once,
      file_level_metadata_KeyMessages_2eproto[0]);
}

// ===================================================================

class KeyExchange::_Internal {
 public:
};

KeyExchange::KeyExchange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KeyExchange)
}
KeyExchange::KeyExchange(const KeyExchange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeyExchange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.publickey_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.publickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_publickey().empty()) {
    _this->_impl_.publickey_.Set(from._internal_publickey(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.state_ = from._impl_.state_;
  // @@protoc_insertion_point(copy_constructor:KeyExchange)
}

inline void KeyExchange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.publickey_){}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.publickey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.publickey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeyExchange::~KeyExchange() {
  // @@protoc_insertion_point(destructor:KeyExchange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyExchange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.publickey_.Destroy();
}

void KeyExchange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeyExchange::Clear() {
// @@protoc_insertion_point(message_clear_start:KeyExchange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.publickey_.ClearToEmpty();
  _impl_.state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyExchange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string publicKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_publickey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KeyExchange.publicKey"));
        } else
          goto handle_unusual;
        continue;
      // .MsgState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::MsgState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyExchange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KeyExchange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string publicKey = 1;
  if (!this->_internal_publickey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_publickey().data(), static_cast<int>(this->_internal_publickey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KeyExchange.publicKey");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_publickey(), target);
  }

  // .MsgState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KeyExchange)
  return target;
}

size_t KeyExchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KeyExchange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string publicKey = 1;
  if (!this->_internal_publickey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_publickey());
  }

  // .MsgState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyExchange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeyExchange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyExchange::GetClassData() const { return &_class_data_; }


void KeyExchange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeyExchange*>(&to_msg);
  auto& from = static_cast<const KeyExchange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KeyExchange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_publickey().empty()) {
    _this->_internal_set_publickey(from._internal_publickey());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyExchange::CopyFrom(const KeyExchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KeyExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyExchange::IsInitialized() const {
  return true;
}

void KeyExchange::InternalSwap(KeyExchange* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.publickey_, lhs_arena,
      &other->_impl_.publickey_, rhs_arena
  );
  swap(_impl_.state_, other->_impl_.state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyExchange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KeyMessages_2eproto_getter, &descriptor_table_KeyMessages_2eproto_once,
      file_level_metadata_KeyMessages_2eproto[1]);
}

// ===================================================================

class Wrapper::_Internal {
 public:
  static const ::CheckRegParameterStatus& checkregparameterstatus(const Wrapper* msg);
  static const ::Registration& registration(const Wrapper* msg);
  static const ::Login& login(const Wrapper* msg);
  static const ::EncryptedMessage& encryptedmessage(const Wrapper* msg);
  static const ::KeyExchange& keyexchange(const Wrapper* msg);
};

const ::CheckRegParameterStatus&
Wrapper::_Internal::checkregparameterstatus(const Wrapper* msg) {
  return *msg->_impl_.Messages_.checkregparameterstatus_;
}
const ::Registration&
Wrapper::_Internal::registration(const Wrapper* msg) {
  return *msg->_impl_.Messages_.registration_;
}
const ::Login&
Wrapper::_Internal::login(const Wrapper* msg) {
  return *msg->_impl_.Messages_.login_;
}
const ::EncryptedMessage&
Wrapper::_Internal::encryptedmessage(const Wrapper* msg) {
  return *msg->_impl_.Messages_.encryptedmessage_;
}
const ::KeyExchange&
Wrapper::_Internal::keyexchange(const Wrapper* msg) {
  return *msg->_impl_.Messages_.keyexchange_;
}
void Wrapper::set_allocated_checkregparameterstatus(::CheckRegParameterStatus* checkregparameterstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Messages();
  if (checkregparameterstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(checkregparameterstatus));
    if (message_arena != submessage_arena) {
      checkregparameterstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checkregparameterstatus, submessage_arena);
    }
    set_has_checkregparameterstatus();
    _impl_.Messages_.checkregparameterstatus_ = checkregparameterstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.checkRegParameterStatus)
}
void Wrapper::clear_checkregparameterstatus() {
  if (_internal_has_checkregparameterstatus()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Messages_.checkregparameterstatus_;
    }
    clear_has_Messages();
  }
}
void Wrapper::set_allocated_registration(::Registration* registration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Messages();
  if (registration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(registration));
    if (message_arena != submessage_arena) {
      registration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registration, submessage_arena);
    }
    set_has_registration();
    _impl_.Messages_.registration_ = registration;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.registration)
}
void Wrapper::clear_registration() {
  if (_internal_has_registration()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Messages_.registration_;
    }
    clear_has_Messages();
  }
}
void Wrapper::set_allocated_login(::Login* login) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Messages();
  if (login) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login));
    if (message_arena != submessage_arena) {
      login = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login, submessage_arena);
    }
    set_has_login();
    _impl_.Messages_.login_ = login;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.login)
}
void Wrapper::clear_login() {
  if (_internal_has_login()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.Messages_.login_;
    }
    clear_has_Messages();
  }
}
void Wrapper::set_allocated_encryptedmessage(::EncryptedMessage* encryptedmessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Messages();
  if (encryptedmessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(encryptedmessage);
    if (message_arena != submessage_arena) {
      encryptedmessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encryptedmessage, submessage_arena);
    }
    set_has_encryptedmessage();
    _impl_.Messages_.encryptedmessage_ = encryptedmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.encryptedMessage)
}
void Wrapper::set_allocated_keyexchange(::KeyExchange* keyexchange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Messages();
  if (keyexchange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(keyexchange);
    if (message_arena != submessage_arena) {
      keyexchange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keyexchange, submessage_arena);
    }
    set_has_keyexchange();
    _impl_.Messages_.keyexchange_ = keyexchange;
  }
  // @@protoc_insertion_point(field_set_allocated:Wrapper.keyexchange)
}
Wrapper::Wrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Wrapper)
}
Wrapper::Wrapper(const Wrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Wrapper* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.Messages_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_Messages();
  switch (from.Messages_case()) {
    case kCheckRegParameterStatus: {
      _this->_internal_mutable_checkregparameterstatus()->::CheckRegParameterStatus::MergeFrom(
          from._internal_checkregparameterstatus());
      break;
    }
    case kRegistration: {
      _this->_internal_mutable_registration()->::Registration::MergeFrom(
          from._internal_registration());
      break;
    }
    case kLogin: {
      _this->_internal_mutable_login()->::Login::MergeFrom(
          from._internal_login());
      break;
    }
    case kEncryptedMessage: {
      _this->_internal_mutable_encryptedmessage()->::EncryptedMessage::MergeFrom(
          from._internal_encryptedmessage());
      break;
    }
    case kKeyexchange: {
      _this->_internal_mutable_keyexchange()->::KeyExchange::MergeFrom(
          from._internal_keyexchange());
      break;
    }
    case MESSAGES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Wrapper)
}

inline void Wrapper::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.Messages_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_Messages();
}

Wrapper::~Wrapper() {
  // @@protoc_insertion_point(destructor:Wrapper)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Wrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Messages()) {
    clear_Messages();
  }
}

void Wrapper::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Wrapper::clear_Messages() {
// @@protoc_insertion_point(one_of_clear_start:Wrapper)
  switch (Messages_case()) {
    case kCheckRegParameterStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Messages_.checkregparameterstatus_;
      }
      break;
    }
    case kRegistration: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Messages_.registration_;
      }
      break;
    }
    case kLogin: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Messages_.login_;
      }
      break;
    }
    case kEncryptedMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Messages_.encryptedmessage_;
      }
      break;
    }
    case kKeyexchange: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.Messages_.keyexchange_;
      }
      break;
    }
    case MESSAGES_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MESSAGES_NOT_SET;
}


void Wrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:Wrapper)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_Messages();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wrapper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CheckRegParameterStatus checkRegParameterStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_checkregparameterstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Registration registration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_registration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Login login = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_login(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .EncryptedMessage encryptedMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_encryptedmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .KeyExchange keyexchange = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_keyexchange(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Wrapper::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Wrapper)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .CheckRegParameterStatus checkRegParameterStatus = 1;
  if (_internal_has_checkregparameterstatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::checkregparameterstatus(this),
        _Internal::checkregparameterstatus(this).GetCachedSize(), target, stream);
  }

  // .Registration registration = 2;
  if (_internal_has_registration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::registration(this),
        _Internal::registration(this).GetCachedSize(), target, stream);
  }

  // .Login login = 3;
  if (_internal_has_login()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::login(this),
        _Internal::login(this).GetCachedSize(), target, stream);
  }

  // .EncryptedMessage encryptedMessage = 4;
  if (_internal_has_encryptedmessage()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::encryptedmessage(this),
        _Internal::encryptedmessage(this).GetCachedSize(), target, stream);
  }

  // .KeyExchange keyexchange = 5;
  if (_internal_has_keyexchange()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::keyexchange(this),
        _Internal::keyexchange(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Wrapper)
  return target;
}

size_t Wrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Wrapper)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (Messages_case()) {
    // .CheckRegParameterStatus checkRegParameterStatus = 1;
    case kCheckRegParameterStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Messages_.checkregparameterstatus_);
      break;
    }
    // .Registration registration = 2;
    case kRegistration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Messages_.registration_);
      break;
    }
    // .Login login = 3;
    case kLogin: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Messages_.login_);
      break;
    }
    // .EncryptedMessage encryptedMessage = 4;
    case kEncryptedMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Messages_.encryptedmessage_);
      break;
    }
    // .KeyExchange keyexchange = 5;
    case kKeyexchange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.Messages_.keyexchange_);
      break;
    }
    case MESSAGES_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Wrapper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Wrapper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Wrapper::GetClassData() const { return &_class_data_; }


void Wrapper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Wrapper*>(&to_msg);
  auto& from = static_cast<const Wrapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Wrapper)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.Messages_case()) {
    case kCheckRegParameterStatus: {
      _this->_internal_mutable_checkregparameterstatus()->::CheckRegParameterStatus::MergeFrom(
          from._internal_checkregparameterstatus());
      break;
    }
    case kRegistration: {
      _this->_internal_mutable_registration()->::Registration::MergeFrom(
          from._internal_registration());
      break;
    }
    case kLogin: {
      _this->_internal_mutable_login()->::Login::MergeFrom(
          from._internal_login());
      break;
    }
    case kEncryptedMessage: {
      _this->_internal_mutable_encryptedmessage()->::EncryptedMessage::MergeFrom(
          from._internal_encryptedmessage());
      break;
    }
    case kKeyexchange: {
      _this->_internal_mutable_keyexchange()->::KeyExchange::MergeFrom(
          from._internal_keyexchange());
      break;
    }
    case MESSAGES_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Wrapper::CopyFrom(const Wrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Wrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wrapper::IsInitialized() const {
  return true;
}

void Wrapper::InternalSwap(Wrapper* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.Messages_, other->_impl_.Messages_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Wrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_KeyMessages_2eproto_getter, &descriptor_table_KeyMessages_2eproto_once,
      file_level_metadata_KeyMessages_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::EncryptedMessage*
Arena::CreateMaybeMessage< ::EncryptedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EncryptedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::KeyExchange*
Arena::CreateMaybeMessage< ::KeyExchange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KeyExchange >(arena);
}
template<> PROTOBUF_NOINLINE ::Wrapper*
Arena::CreateMaybeMessage< ::Wrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Wrapper >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
